var app = null;

var _globalUniversityGradeArray = [
  {key: 'associate', text: '전문학사'},
  {key: 'bachelor', text: '학사'},
  {key: 'master', text: '석사'},
  {key: 'doctor', text: '박사'},
];




/**
 * @description 토익 차트 관련 series data 생성.
 * @param {*} toeic 
 * @returns 
 */
function getToeicSeriesData(toeic, type) {
  var group = type == 'toeic' ? [
    {name: '0~99', start: 0, end:99},
    {name: '100~199', start: 100, end:199,},
    {name: '200~299', start: 200, end:299,},
    {name: '300~399', start: 300, end:399,},
    {name: '400~499', start: 400, end:499,},
    {name: '500~599', start: 500, end:599,},
    {name: '600~699', start: 600, end:699,},
    {name: '700~799', start: 700, end:799,},
    {name: '800~899', start: 800, end:899,},
    {name: '900~990', start: 900, end:990,},
  ] : [
    {name: '0~10', start: 0, end:10},
    {name: '11~20', start: 11, end:20},
    {name: '21~30', start: 21, end:30},
    {name: '31~40', start: 31, end:40},
    {name: '41~50', start: 41, end:50},
    {name: '51~60', start: 51, end:60},
    {name: '61~70', start: 61, end:70},
    {name: '71~80', start: 71, end:80},
    {name: '81~90', start: 81, end:90},
    {name: '91~100', start:91, end:100},
  ];

  var totalCount = toeic.length;
  
  if(totalCount > 0) {
    var result = _.map(group, function(item) {
      var count = _.filter(toeic, function(x) {
        if(x >= item.start && x <= item.end) {
          return x;
        }
      }).length;
      item.count = count;
      item.y = round((count / totalCount) * 100);
      return item;
    });
    return result
  }
  else {
    return [];
  }

  
}


/**
 * @description 학점 차트 관련 series data 생성.
 * @param {*} toeic 
 * @returns 
 */
function getGradeSeriesData(data) {
  var group = [
    {name: '3.0 미만', start: 0, end:2.9},
    {name: '3.0 ~ 3.5 미만', start: 3.0, end:3.4},
    {name: '3.5 ~ 4.0 미만', start: 3.5, end:3.9},
    {name: '4.0 ~ 4.5 이상', start: 4.0, end:5},
  ];

  var totalCount = data.length;
  

  var result = _.map(group, function(item) {
    var count = _.filter(data, function(x) {
      if(x >= item.start && x <= item.end) {
        return x;
      }
    }).length;
    item.count = count;
    item.y = round((count / totalCount) * 100);
    return item;
  });
  return result
}


/**
 * @description 라인 차트 Render
 * @param {*} id 
 * @param {*} seriesData 
 */
function setRenderLineChart(id, seriesData, min, max, startIndex, endIndex) {
  Highcharts.chart(id, {
    title: {text: ''},
    tooltip: {
      headerFormat: '',
      pointFormat: '<span style="color:{point.color}"> \u25CF </span><b>{point.name}</b>  ' + '<br /><b>{point.y:.1f}%</b>',
    },
    yAxis: { title: { text: '' } , min:0, max: 100 },
    xAxis: { type: 'category' },
    series: [{
        showInLegend: false,
        name: '',
        data: seriesData,
        marker: {
          symbol: 'cross',
          lineColor: 'black',
          lineWidth: 3,
          fillColor: '#FFFFFF',
        }
    }],
    plotOptions: {
      series: {
        dataLabels: {
          enabled: true,
          y: -20,
          style: {
            fontFamily: 'Segoe UI',
            color: 'gray',
            fontSize: '16px',
            textOutline: false,
          },
          format: '{point.y:.1f}%',
        },
        color: 'gray',
        marker: {
          radius: 7
        }
      }
    },
    annotations: [{
      labels: [{
        point: {
          xAxis: 0,
          yAxis: 0,
          x: startIndex,
          y: seriesData[startIndex].y + 20,
        },
        text: '최소 ' + min,
      },{
        point: {
          xAxis: 0,
          yAxis: 0,
          x: endIndex,
          y: seriesData[endIndex].y + 20
        },
        text: '최대 ' + max,
      }]
    }],
    exporting: { enabled: false },
    credits: { enabled: false }
  });


}







/**
 * @description 소재지 관련 JSON Array Mapping
 * @param {*} area 
 * @param {*} degree 
 */
function getUniversityDegreeRemapping(area, degree) {
  //소재지별 최종학력 근황.
  var all = _.map(getSeriesDataAndSort(area), function(item) {
    return {text: item.text, point: item.point, associate: 0, bachelor: 0, master: 0, doctor: 0};
  });


  _.map(_globalUniversityGradeArray, function(grade) {
    var nowData = degree[grade.text];
    _.map(all, function(area, index) {
      if(nowData[area.text]) {
        all[index][grade.key] = round((nowData[area.text] / all[index]['point']) * 100);
      }
    });
  });
  return all;
}



/**
 * @description 출신학교 / 전공 관련 JSON Array Mapping
 * @param {*} area 
 * @param {*} degree 
 */
function getOriginUniversityRemapping(all, degree) {
  var universityKey = _.keys(all);


  var result = {all: [], associate: [], bachelor: [], master: [], doctor: []};
  var allPoint = _.sum(_.map(universityKey, function (item, index) {
    return  all[item];
  }));
  
  var _all = _.map(universityKey, function (item, index) {
    return {
      text: item,
      value: round((all[item] / allPoint) * 100)+'%(' + all[item] + '명)',
      point: all[item],
    };
  });
  result.all = _.sortBy(_all, 'point').reverse();

  _.map(_globalUniversityGradeArray, function(grade, index) {
    var nowObject = degree[grade.text];
    var nowKey = _.keys(nowObject);
    if(nowObject) {
      var nowPoint = _.sum(_.map(nowKey, function (_key, index) {
        return  nowObject[_key];
      }));
      var _now = _.map(nowKey, function (item, index) {
        return {
          text: item,
          value: round((nowObject[item] / nowPoint) * 100)+'%(' + nowObject[item] + '명)',
          point: nowObject[item],
        };
      });

      result[grade.key] = _.sortBy(_now, 'point').reverse();
    }
  });

  return result;
}


function json_to_sheet(remappingData) {
	  var _workSheet = {};
	  var _range = { s: { c: 0, r: 0 }, e: { c: 9, r: remappingData.length } };
	  var mergesArray = [];
	  remappingData.map((item, index) => {
	    var option = item[0];
	    var existsCount = item[1];
	    var data = item.slice(2,12);

	    var styleObject = {};

	    if(option === 'bigtitle') {
	      mergesArray.push({s:{r:index,c:0},e:{r:index,c:9}});
	      styleObject = {
	        border: {
	          bottom: { style: 'thin', color: 'gray' },
	          top: { style: 'thin', color: 'gray' },
	          left: { style: 'thin', color: 'gray' },
	          right: { style: 'thin', color: 'gray' },
	        },
	        font: {
	          sz: 13,
	          bold: true,
	          //color: { rgb: '30839f' },
	        },
	        fill: {
	          fgColor: { rgb: 'F2F2F2' },
	        },
	        alignment: { wrapText: true, horizontal: 'center', vertical: 'center' },
	      };
	    }
	    else if(option === 'search1') {
	      mergesArray.push({s:{r:index,c:0},e:{r:index,c:9}});
	      styleObject = {
	        border: {
	          top: { style: 'thin', color: 'gray' },
	          left: { style: 'thin', color: 'gray' },
	          right: { style: 'thin', color: 'gray' },
	        },
	      };
	    }
	    else if(option === 'search2') {
	      mergesArray.push({s:{r:index,c:0},e:{r:index,c:9}});
	      styleObject = {
	        border: {
	          bottom: { style: 'thin', color: 'gray' },
	          left: { style: 'thin', color: 'gray' },
	          right: { style: 'thin', color: 'gray' },
	        },
	      };
	    }
	    if(option === 'header' || option === 'header-two-three' || option === 'header-two' || option === 'header-three-three' || option === 'header-three'|| option === 'header-two-multi') {
	      if(option === 'header-two-three') {
	        mergesArray.push({s:{r:index,c:1},e:{r:index,c:2}});
	        mergesArray.push({s:{r:index,c:3},e:{r:index,c:4}});
	        mergesArray.push({s:{r:index,c:5},e:{r:index,c:6}});
	      }else if(option === 'header-three-three') {
		        mergesArray.push({s:{r:index,c:1},e:{r:index,c:3}});
		        mergesArray.push({s:{r:index,c:4},e:{r:index,c:6}});
		        mergesArray.push({s:{r:index,c:7},e:{r:index,c:9}});
		  }else if(option === 'header-two') {
	        mergesArray.push({s:{r:index,c:1},e:{r:index,c:2}});
	      }else if(option === 'header-three') {
		        mergesArray.push({s:{r:index,c:1},e:{r:index,c:3}});
		  }else if(option === 'header-two-multi') {
			    var colCnt = data.length - 1 / 2;
			    for(var i=0;i<colCnt;i++){
			    	mergesArray.push({s:{r:index,c:(i*2)+1},e:{r:index,c:(i+1)*2}});
			    }
		  }
	      styleObject = {
	        border: {
	          bottom: { style: 'thin', color: 'gray' },
	          top: { style: 'thin', color: 'gray' },
	          left: { style: 'thin', color: 'gray' },
	          right: { style: 'thin', color: 'gray' },
	        },
	        fill: {
	          fgColor: { rgb: 'FFFFDE7' },
	        },
	        alignment: { wrapText: true, horizontal: 'center', vertical: 'center' },
	      };
	    }
	    if(option === 'data' || option === 'data-first') {
	      styleObject = {
	        border: {
	          bottom: { style: 'thin', color: 'gray' },
	          top: { style: 'thin', color: 'gray' },
	          left: { style: 'thin', color: 'gray' },
	          right: { style: 'thin', color: 'gray' },
	        },
	        alignment: { wrapText: true, horizontal: 'center', vertical: 'center' },
	      };
	    }
	    else {

	    }

	    data.map((subitem, subindex) => {
	      var type = typeof subitem == 'number' ? 'n' : typeof subitem == 'boolean' ? 'b' : 'z';
	      if(existsCount > subindex)
	        if(option === 'data-first') {
	          if(subindex === 0) {
	            styleObject.fill = {fgColor: { rgb: 'FFFFDE7' }};
	          }
	          else {
	            styleObject.fill = {fgColor: { rgb: 'FFFFFF' }};
	          }
	          
	        }
	        _workSheet[XLSX.utils.encode_cell({ r: index, c: subindex })] = { t: type, v: subitem, s: styleObject };
	      });

	    
	    

	  });
	  _workSheet['!ref'] = XLSX.utils.encode_range(_range);
	  return {data: _workSheet, mergesArray};
	  
	}


	function s2ab(s) {
	  var buf = new ArrayBuffer(s.length);
	  var view = new Uint8Array(buf);
	  for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xff;
	  return buf;
	}

	function Workbook() {
	  if (!(this instanceof Workbook)) return new Workbook();
	  this.SheetNames = [];
	  this.Sheets = {};
	}


/**
 * @description Select List 기본 선택 추가.
 * @param {*} _type 
 * @returns 
 */
function getDefaultSelect(_type) {
  var result = {text: '선택', value: ''};
  switch (_type) {
    case "YEAR":
      result['text'] = '대상 년도 선택';
      break;

    case "COMTYPE":
      result['text'] = '기업 규모 선택';
      break;

    case "COMIND":
      result['text'] = '기업 분류 선택'
      break;
    case "COMNM":
      result['text'] = '기업 분류 선택'
      break;
  }
  return result;
}

$(document).ready(function() {
  $.ajax({
    type: "GET",
    url: "/swiss/cm/getStatUICode.do?year=",
    dataType: "text",
    success: function (data) {
      var responseData = JSON.parse(data);
      app = new Vue({
        el: "#app",
        data: {
          null_value:null,
          isResponse: false,
          isUIResponse: false,
          isFetching: false,
          isLicense: true,
          isPublicLicense: true,
          isPrivateLicense: true,
          years: _.sortBy(arrayToObject(responseData, 'YEAR'), 'text').reverse(),
          selectedYear: _.sortBy(arrayToObject(responseData, 'YEAR'), 'text').reverse()[0].text,
          companySizes: arrayToObject(responseData, 'COMIND'),
          selectedCompanySize: null,
          selectedCompanySizeText: null,
          companyTypes: arrayToObject(responseData, 'COMTYPE'),
          selectedCompanyType: null,
          selectedCompanyTypeText: null,
          hopeSalary: { start: 0, end: 0 },
          hopeSalary_comp: { start: 0, end: 0 },
          // companyList: arrayToObject(responseData, 'COMNM'),
          companySearch: '',
          companySearchResults: [],
          isCompanyResultOpen: false,
          selectedCompany: null,
          searchResult: null,
          avarageAnalysis: {
            gradescore_avg: 0,
            gradescore_percent: 0.0,
            toeic_avg: 0,
            toeic_percent: 0,
            license_avg: 0,
            license_percent: 0,
            oversea_avg: 0,
            oversea_percent: 0,
            internship_avg: 0,
            internship_percent: 0,
          },
          wrap_tab_toggle: {
        	company: true,
            job: true,
            university: true,
            major: true,
            license: true,
            intern: true,
          },
          university_area: [],
          university_origin: [],

          university_dept: [],

          university_deptcol: [],
          selectedOriginTabValue: '',
          university_origin_tab_list: [],
          
          selectedAreaTabValue: '',
          university_area_tab_list: [],

          selectedDeptTabValue: '',
          university_dept_tab_list: [],

          selectedDeptcolTabValue: '',
          university_deptcol_tab_list: [],
          toeic_avarage: 0,
          toeic_rate: 0,
          license_list: [],
          privatelicense_list: [],
          company_info: {
        	  COMNM: "",
        	  COMTYPE: "",
        	  SECTOR: "",
        	  INDNAME: "",
        	  SALARY: 0,
        	  LIVEGRADE: "",
        	  LIVEDATE: "",
        	  YEAR: [],
        	  EMPLOYEECNT: [],
        	  ENTRANTCNT: [],
        	  RETIREECNT: [],
        	  SALARYCOMPARE: []
          },
          isCompany_info: false,
          isCompany_list: false,
          slider_value: 0,
          slider_text: "전체",
          companyFindResult: null,
          resultCount: 0,
          company_list: [],
          
        },
        methods: {
        	
            /**
             * @description 엑셀 출력
             */
            excelExport: function () {
              var _this = this;
              var nowData = this.searchResult;
              var ws_name = '취업현황';
              var wb = new Workbook();

              var getSubtitle = (title) => {
                return ['subtitle',10,title,'','','','','','','','',''];
              }
              var wsData = [];
              
              var rowEmpty = ['empty',10,'','','','','','','','','',''];
              wsData.push(rowEmpty);
              var titleRow = ['bigtitle',10,'취업 현황','','','','','','','','',''];
              wsData.push(titleRow);
              wsData.push(rowEmpty);
              
              var searhcText11 = '';
              if(_this.selectedCompany) {
                searhcText11 += _this.selectedCompany.text;
                searhcText11 += _this.hopeSalary_comp.start ? ' / ' + _this.hopeSalary_comp.start  + ' 만원': '';
                searhcText11 += _this.hopeSalary_comp.end ? ' ~ ' + _this.hopeSalary_comp.end  + ' 만원' : '';
              }
              else {
                searhcText11 += _this.selectedCompanyTypeText ? _this.selectedCompanyTypeText : '';
                searhcText11 += _this.selectedCompanySizeText ? ' / ' + _this.selectedCompanySizeText : '';
                searhcText11 += _this.hopeSalary.start ? ' / ' + _this.hopeSalary.start  + ' 만원': '';
                searhcText11 += _this.hopeSalary.end ? ' ~ ' + _this.hopeSalary.end  + ' 만원' : '';
              }

              

              var searchRow1 = ['search1',10,`1. 통계 기준: ${_this.selectedYear}`,'','','','','','','','',''];
              wsData.push(searchRow1);
              var searchRow2 = ['search2',10,`2. 검색 조건: ${searhcText11}`,'','','','','','','','',''];
              wsData.push(searchRow2);
              
              wsData.push(rowEmpty);

              if(_this.selectedCompany && nowData.COMPANYINFO) {
                var title1 = ['subtitle',7,'▶취업처 현황','(※ 출처: ㈜이크레더블)','','','','',''];
                wsData.push(title1);
                var dataHeaderRow1 = ['header',7,'이름','기업규모','업종','표준산업분류','평균연봉','기업상태','기업상태 평가일'];
                wsData.push(dataHeaderRow1);
                var _data1 = nowData.COMPANYINFO;
                var dataRow1 = ['data',7,_data1.COMNM,_data1.COMTYPE,_data1.SECTOR,_data1.INDNAME,`${_data1.SALARY} 만원`,_data1.LIVEGRADE, _data1.LIVEDATE];
                wsData.push(dataRow1);
                wsData.push(rowEmpty);
                wsData.push(['header', 6, '', '종업원수', '입사자수', '퇴사자수', '입사율', '퇴사율']);
                var yeardata = _data1.YEAR;
                yeardata.forEach((year, index) => {
                	var empratio =  parseFloat((_data1.ENTRANTCNT[index] / _data1.EMPLOYEECNT[index] * 100).toFixed(2));
                	var retratio =  parseFloat((_data1.RETIREECNT[index] / _data1.EMPLOYEECNT[index] * 100).toFixed(2));
                	wsData.push(['data-first', 6, year, _data1.EMPLOYEECNT[index],  _data1.ENTRANTCNT[index],  _data1.RETIREECNT[index], empratio, retratio]);
                })
                wsData.push(rowEmpty);
              }else{
                var title1 = ['subtitle',3,'▶취업기업목록','',''];
                wsData.push(title1);
                var dataHeaderRow1 = ['header',3,'기업명','비율(%)','인원수'];
                wsData.push(dataHeaderRow1);
                var companyList = nowData.company_list;
                for (const [key, value] of Object.entries(companyList)) {
                  var infos = key.split('_');
                  wsData.push(['data-first', 6, infos[1], parseFloat((value/nowData.count * 100).toFixed(2)),  value]);
                }
                wsData.push(rowEmpty);
              }

              //취업현황요약
              wsData.push(getSubtitle('▶취업현황 요약'));
              wsData.push(['header',7,'학점(백분율)','토익점수','자격증 수','편입여부(%)','교직과정이수여부(%)','현장경험여부(%)','해외연수경여부(%)']);
              var tt = _this.avarageAnalysis;
              wsData.push(['data', 7, tt.gradescore_avg, tt.toeic_avg, tt.license_avg, tt.transfer_percent, tt.teach_percent, tt.internship_percent, tt.oversea_percent]);
              wsData.push(rowEmpty);

              //학제
              wsData.push(getSubtitle('▶학제'));
              var tt2 = nowData.university_kind;
              const tt2keys = Object.keys(tt2);
              var tt2cnt = tt2keys.length+1;
              var tt2sum = _.sum(_.values(tt2));
              var tt2header = ['header', tt2cnt, '구분'];
              tt2header = tt2header.concat(tt2keys);
              wsData.push(tt2header);
              var tt2num = ['data', tt2cnt, '인원']
              var tt2ratio = ['data', tt2cnt, '비율(%)']
              tt2keys.forEach(ele => {
            	  tt2num.push(tt2[ele]);
            	  tt2ratio.push(parseFloat((tt2[ele]/tt2sum*100).toFixed(3)));
              });
              wsData.push(tt2num);
              wsData.push(tt2ratio);
              wsData.push(rowEmpty);

              //최종학력
              wsData.push(getSubtitle('▶설립구분'));
              var tt3 = nowData.university_fund;
              const tt3keys = Object.keys(tt3);
              var tt3cnt = tt3keys.length+1;
              var tt3sum = _.sum(_.values(tt3));
              var tt3header = ['header', tt3cnt, '구분'];
              tt3header = tt3header.concat(tt3keys);
              wsData.push(tt3header);
              var tt3num = ['data', tt3cnt, '인원']
              var tt3ratio = ['data', tt3cnt, '비율(%)']
              tt3keys.forEach(ele => {
            	  tt3num.push(tt3[ele]);
            	  tt3ratio.push(parseFloat((tt3[ele]/tt3sum*100).toFixed(3)));
              });
              wsData.push(tt3num);
              wsData.push(tt3ratio);
              wsData.push(rowEmpty);

              //최종 학력 소재지
              wsData.push(getSubtitle('▶최종학력'));
              var tt4 = nowData.degreeCnt;
              const tt4keys = Object.keys(tt4);
              var tt4cnt = tt4keys.length+1;
              var tt4header = ['header', tt4cnt, '구분'];
              tt4header = tt4header.concat(tt4keys);
              wsData.push(tt4header);
              var tt4num = ['data', tt4cnt, '인원']
              var tt4ratio = ['data', tt4cnt, '비율(%)']
              tt4keys.forEach(ele => {
            	  tt4num.push(tt4[ele][0]);
            	  tt4ratio.push(tt4[ele][1]);
              });
              wsData.push(tt4num);
              wsData.push(tt4ratio);
              wsData.push(rowEmpty);
              

              //▶ 최종학력 소재지
              wsData.push(getSubtitle('▶최종학력 소재지'));
              var tt5 = nowData.uniAreaCnt;
              const tt5keys = Object.keys(tt5);
              var tt5cnt = tt5keys.length*2+1;
              var tt5header1 = ['header-two-multi', tt5cnt, '구분'];
              var tt5header2 = ['header', tt5cnt, ''];
              tt5keys.forEach(ele => {
            	  tt5header1.push(ele);
            	  tt5header1.push('')
            	  tt5header2.push('인원');
            	  tt5header2.push('비율(%)')
              });
              wsData.push(tt5header1);
              wsData.push(tt5header2);
              var tt5subkeys = Object.keys(tt5[tt5keys[0]]);
              tt5subkeys.forEach(ele => {
            	  var tt5data = ['data', tt5cnt, ele];
            	  tt5keys.forEach(mele => {
            		  tt5data.push(tt5[mele][ele][0]);
            		  tt5data.push(tt5[mele][ele][1]); 
            	  });
            	  wsData.push(tt5data);
              });
              wsData.push(rowEmpty);
              
            //▶ 졸업학교 및 전공
              wsData.push(getSubtitle('▶ 졸업학교 및 전공'));
              var uni = nowData.uniCnt;
              var dpet = nowData.dept;
              var deptcol = nowData.deptColCnt;
              const unikeys = Object.keys(uni);
              const dpetkeys = Object.keys(dpet);
              const deptcolkeys = Object.keys(deptcol);
              var deptsum = _.sum(_.values(dpet));
              var tt6cnt = 10;
              var tt6header1 = ['header-three-three', tt6cnt, '구분', '졸업 학교', '', '', '전공 학과', '', '', '전공 계열', '', ''];
              var tt6header2 = ['header', tt6cnt, '', '명칭', '인원', '비율(%)', '명칭', '인원', '비율(%)', '명칭', '인원', '비율(%)'];
              wsData.push(tt6header1);
              wsData.push(tt6header2);
              
              var maxCnt = unikeys.length;
              maxCnt = maxCnt > dpetkeys.length ? maxCnt : dpetkeys.length;
              maxCnt = maxCnt > deptcolkeys.length ? maxCnt : deptcolkeys.length;
              
              var i;
              for (i = 0; i < maxCnt; i++) {
            	  var tt6data = ['data', tt6cnt, i+1];
            	  if(unikeys.length > i){
            		  tt6data = tt6data.concat([unikeys[i], uni[unikeys[i]][0], uni[unikeys[i]][1]]);
            	  }else{
            		  tt6data = tt6data.concat(['', '', '']);
            	  }
            	  if(dpetkeys.length > i){
            		  var idx = dpetkeys[i].lastIndexOf('/') == -1 ? 0 : dpetkeys[i].lastIndexOf('/') + 2;  	
	                  var itemtext = dpetkeys[i].substr(idx);
	                  tt6data = tt6data.concat([itemtext, dpet[dpetkeys[i]], parseFloat((dpet[dpetkeys[i]]/deptsum*100).toFixed(3))]);
                  }else{
                	  tt6data = tt6data.concat(['', '', '']);
            	  }
            	  if(deptcolkeys.length > i){
            		  var idx = deptcolkeys[i].lastIndexOf('/') == -1 ? 0 : deptcolkeys[i].lastIndexOf('/') + 2;  	
	                  var itemtext = deptcolkeys[i].substr(idx);
	                  tt6data = tt6data.concat([deptcolkeys[i], deptcol[deptcolkeys[i]][0], deptcol[deptcolkeys[i]][1]]);
                  }else{
                	  tt6data = tt6data.concat(['', '', '']);
            	  }
            	  wsData.push(tt6data);
              }
              wsData.push(rowEmpty);
              
              wsData.push(getSubtitle('▶자격증 종류(국가기술/국가전문)'));
              wsData.push(['header-three', 4, '구분', '자격증','','']);
              wsData.push(['header', 4, '','명칭','인원', '비율(%)']);

              //▶ 자격증
              var license_nm = nowData.license_nm; 
              var licsum = _.sum(_.values(license_nm));
              _.keys(license_nm).map((item, index) => {
                return {name: item, value: license_nm[item]};
              }).map((item, index) => {
            	  var idx =item.name.lastIndexOf('/') == -1 ? 0 : item.name.lastIndexOf('/') + 2;  	
                  var itemtext = item.name.substr(idx);
                wsData.push(['data-first', 4, 
                  (index + 1), 
                  itemtext,
                  item.value,
                  parseFloat((item.value/licsum*100).toFixed(3))
                ]);
              });
              wsData.push(rowEmpty);

              wsData.push(getSubtitle('▶자격증 종류(민간공인/민간등록)'));
              wsData.push(['header-three', 4, '구분', '자격증','','']);
              wsData.push(['header', 4, '','명칭','인원', '비율(%)']);

              //▶ 자격증
              var private_license_nm = nowData.private_license_nm;
              var private_licsum = _.sum(_.values(private_license_nm));
              _.keys(private_license_nm).map((item, index) => {
                return {name: item, value: private_license_nm[item]};
              }).map((item, index) => {
            	  var idx =item.name.lastIndexOf('/') == -1 ? 0 : item.name.lastIndexOf('/') + 2;
                  var itemtext = item.name.substr(idx);
                wsData.push(['data-first', 4,
                  (index + 1),
                  itemtext,
                  item.value,
                  parseFloat((item.value/licsum*100).toFixed(3))
                ]);
              });
              wsData.push(rowEmpty);


              var getDevValue = (array) => {
                var sum = function(x,y) { return x+y; };
                var square = function(x) {return x*x; };
                var mean = array.reduce(sum)/array.length; // 평균 3
                var deviations = array.map(function(x) { return x-mean; });
                var stddev = Math.sqrt(deviations.map(square).reduce(sum)/(array.length-1)); // 표준편차 2
                return stddev;
              }

              var getQuantile = (arr, type) => {
                const asc = arr => arr.sort((a, b) => a - b);
                const sum = arr => arr.reduce((a, b) => a + b, 0);
                const mean = arr => sum(arr) / arr.length;
                // sample standard deviation
                const std = (arr) => {
                  const mu = mean(arr);
                  const diffArr = arr.map(a => (a - mu) * (a - mu));
                  return Math.sqrt(sum(diffArr) / (arr.length - 1));
                };
                const quantile = (arr, q) => {
                  const sorted = asc(arr);
                  const pos = (sorted.length - 1) * q;
                  const base = Math.floor(pos);
                  const rest = pos - base;
                  if (sorted[base + 1] !== undefined) {
                      return sorted[base] + rest * (sorted[base + 1] - sorted[base]);
                  } else {
                      return sorted[base];
                  }
                };
                const q25 = arr => quantile(arr, .25);
                const q50 = arr => quantile(arr, .50);
                const q75 = arr => quantile(arr, .75);
                //const median = arr => q50(arr);
                if(type == 25) {
                  return q25(arr);
                }
                else if(type == 50) {
                  return q50(arr);
                }
                else {
                  return q75(arr);
                }
              }

              //▶ 학점 및 토익점수
              wsData.push(getSubtitle('▶ 학점 및 토익점수'));
              wsData.push(['header',3,'구분','학점', 'TOEIC']);
              var toeic_percent = nowData.toeic_percent;
              var gradescore_percent = nowData.gradescore_percent;
              var toeic_v = 0;
              var toeic_dev = 0;
              var toeic_min = 0;//getDevValue(nowData.toeic);
              var toeic_max = 0;
              var toeic_25 = 0;
              var toeic_50 = 0;
              var toeic_75 = 0;
              if(nowData.toeic.length > 0){
            	  toeic_v = round(_.sum(nowData.toeic) / nowData.toeic.length);
                  toeic_dev = getDevValue(nowData.toeic);
                  toeic_min = _.min(nowData.toeic);//getDevValue(nowData.toeic);
                  toeic_max = _.max(nowData.toeic);
                  toeic_25 = getQuantile(nowData.toeic, 25);
                  toeic_50 = getQuantile(nowData.toeic, 50);
                  toeic_75 = getQuantile(nowData.toeic, 75);
              }
              var gradescore_v = 0;
              var gradescore_dev = 0;
              var gradescore_min = 0;//getDevValue(nowData.toeic);
              var gradescore_max = 0;
              var gradescore_25 = 0;
              var gradescore_50 = 0;
              var gradescore_75 = 0;
              
              if( nowData.gradescore.length > 0){
                  gradescore_v = round(_.sum(nowData.gradescore) / nowData.gradescore.length);
                  gradescore_dev = getDevValue(nowData.gradescore);
                  gradescore_min = _.min(nowData.gradescore); //getDevValue(nowData.gradescore);
                  gradescore_max = _.max(nowData.gradescore);
                  gradescore_25 = getQuantile(nowData.gradescore, 25);
                  gradescore_50 = getQuantile(nowData.gradescore, 50);
                  gradescore_75 = getQuantile(nowData.gradescore, 75);
              }
              

              wsData.push(['data-first',3, '보유(%)', round(gradescore_percent), round(toeic_percent)]);
              wsData.push(['data-first',3, '평균', round(gradescore_v), round(toeic_v)]);
              wsData.push(['data-first',3, '표준편차', round(gradescore_dev), round(toeic_dev)]);
              wsData.push(['data-first',3, '최소값', gradescore_min, toeic_min]);
              wsData.push(['data-first',3, '1분위값', gradescore_25, toeic_25]);
              wsData.push(['data-first',3, '중앙값', gradescore_50, toeic_50]);
              wsData.push(['data-first',3, '3분위값', gradescore_75, toeic_75]);
              wsData.push(['data-first',3, '최대값', gradescore_max, toeic_max]);
              wsData.push(rowEmpty);

              wsData.push(getSubtitle('▶해외연수 여부'));
              var oversea = nowData.oversea;
              var overseakeys = _.keys(oversea);
              var overseavalues = _.values(oversea);
              var oversea_sum = _.sum(overseavalues);
              wsData.push(['header', overseakeys.length + 1, '구분'].concat(overseakeys));
              wsData.push(['data-first', overseakeys.length + 1, '인원'].concat(overseavalues));
              var oversearatio = overseavalues.map((item, index) => {
                return parseFloat((item/oversea_sum*100).toFixed(3));
              })
              wsData.push(['data-first', overseakeys.length + 1, '비율(%)'].concat(oversearatio));
              wsData.push(rowEmpty);

              wsData.push(getSubtitle('▶현장실습, 편입, 교직과정이수 여부'));
              wsData.push(['header-two-multi', 5, '구분', '예', '', '아니오', '']);
              wsData.push(['header', 5, '', '인원', '비율(%)', '인원', '비율(%)']);
              var internship = nowData.internship;
              var internship_sum = _.sum(_.values(internship));
			  var inyes = internship['현장실습'] == undefined ? 0 : internship['현장실습']
			  var inno = internship['해당없음'] == undefined ? 0 : internship['해당없음']
              wsData.push(['data-first', 5, '현장실습여부', inyes, parseFloat((inyes/internship_sum*100).toFixed(3)),
                            inno, parseFloat((inno/internship_sum*100).toFixed(3))]);
              var transfer = nowData.transfer;
              var transfer_sum = _.sum(_.values(transfer));
			  var tryes = transfer['편입'] == undefined ? 0 : transfer['편입']
			  var trno = transfer['해당없음'] == undefined ? 0 : transfer['해당없음']
              wsData.push(['data-first', 5, '편입여부', tryes, parseFloat((tryes/transfer_sum*100).toFixed(3)),
                            trno, parseFloat((trno/transfer_sum*100).toFixed(3))]);
              var teach = nowData.teach;
              var teach_sum = _.sum(_.values(teach));
			  var teyes = teach['교직이수'] == undefined ? 0 : teach['교직이수']
			  var teno = teach['해당없음'] == undefined ? 0 : teach['해당없음']
              wsData.push(['data-first', 5, '교직이수여부', teyes, parseFloat((teyes/teach_sum*100).toFixed(3)),
                            teno, parseFloat((teno/teach_sum*100).toFixed(3))]);
              wsData.push(rowEmpty);


              var _sheet = json_to_sheet(wsData);
              var ws = _sheet.data;
              ws['!cols'] = _.map(rowEmpty, function (col, index) { return { wch: 20 }; });
              ws['!merges'] = _sheet.mergesArray;
              wb.SheetNames.push(ws_name);
              wb.Sheets[ws_name] = ws;
              var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
              var _date = moment().format('YYYYMMDDHHmm');
              saveAs(new Blob([s2ab(wbout)], { type: 'application/octet-stream' }), ws_name + '_' + _date + '.xlsx');

            },
            
          /**
           * @description 화면 학력 / 자격증 / 인턴 탭 toggle evnet
           * @param {*} type 
           */
          handleWrapTabToggle: function (type) {
            this.wrap_tab_toggle[type] = !this.wrap_tab_toggle[type];

          },
          /**
           * @description 회사 조회 event
           */
          companySearchOnSubmit: function () {
          
            var searchText = this.companySearch;
            var selectedYear = this.selectedYear;
            if(searchText.length > 0) {
            	var _this = this;
            	$.ajax({
            	    type: "GET",
            	    url: "/swiss/cm/findCompany.do?year="+selectedYear+"&comnm="+searchText,
            	    dataType: "text",
            	    async: false,
            	    success: function (data) {
            	      _this.companyFindResult = JSON.parse(data);
            	    }
            	});
            	var comres = arrayToObject(_this.companyFindResult, 'COMNM');
            	if(comres.length == 0){
      	    	  alert('일치하는 이름의 회사가 없습니다.');
                    this.selectedCompany = null;
                    this.isCompanyResultOpen = false;
                    this.companySearchResults = [];
      	        }else{
      	    	  this.isCompanyResultOpen = true;
      	    	  this.companySearchResults = comres;
      	        }
            }
            else {
              alert('검색할 회사명을 작성 하셔야 합니다.');
              this.selectedCompany = null;
              this.isCompanyResultOpen = false;
              this.companySearchResults = [];
            }
          },

          /**
           * @description 회사 조회 초기화.
           */
          companySearchInit: function () {
            this.selectedCompany = null;
            this.companySearch = "";
          },
          /**
           * @description 회사 선택 시 발생 event 
           * @param {*} selectValue 
           */
          handleSelectCompany: function (selectValue) {
            //희망 업종 및 월급 선택 초기화.
            this.selectedCompanySize = null;
            this.selectedCompanyType = null;
            this.hopeSalary = { start: 0, end: 0 };

            this.companySearch = selectValue.text;
            this.selectedCompany = selectValue;
            this.isCompanyResultOpen = false;
            this.companySearchResults = [];
          },

          /**
           * @description 년도 및 회사 규모 등을 변경 시 회사명 선택 정보 초기화.
           */
          handleYearAndCompany: function() {
            if(this.selectedCompany) {
              this.selectedCompany = null;
              this.hopeSalary_comp = { start: 0, end: 0 };
              this.companySearch = '';
              this.isCompanyResultOpen = false;
              this.companySearchResults = [];
            }
          },
          
          handleYearChange: function() {
        	  $.ajax({
        		    type: "GET",
        		    url: "/swiss/cm/getStatUICode.do?year="+this.selectedYear,
        		    dataType: "text",
        		    success: function (data) {
        		      var responseData = JSON.parse(data);
        		      this.companySizes = arrayToObject(responseData, 'COMIND');
        		      this.selectedCompanySize = null;
        		      this.selectedCompanySizeText = null;
        		      this.companyTypes = arrayToObject(responseData, 'COMTYPE');
        		      this.selectedCompanyType = null;
        		      this.selectedCompanyTypeText = null;
        		    }
        	  });
            },

          /**
           * @description 월급여 start 작성 event
           * @param {*} event 
           */
          hopeSalaryStartChange: function (event) {
            var updateSalary = event.target.value || 0;
            this.hopeSalary.start = parseInt(updateSalary);
            if(updateSalary > parseInt(this.hopeSalary.end || 0)) {
              this.hopeSalary.end = parseInt(updateSalary)+100;
            }
            this.handleYearAndCompany();
          },
          
          hopeSalaryCompStartChange: function (event) {
        	  if(this.selectedCompany) {
        		  this.handleSelectCompany(this.selectedCompany);
        	  }
              var updateSalary = event.target.value || 0;
              this.hopeSalary_comp.start = parseInt(updateSalary);
              if(updateSalary > parseInt(this.hopeSalary_comp.end || 0)) {
                this.hopeSalary_comp.end = parseInt(updateSalary)+100;
              }
            },

          /**
           * @description number input 숫자체크 하는 validation function
           * @param {*} evt 
           * @returns bool
           */
          isNumber: function(evt) {
//            if(this.selectedCompany) {
//              this.companySearch = '';
//              this.selectedCompany = null;
//              this.isCompanyResultOpen = false;
//              this.companySearchResults = [];
//            }
            evt = (evt) ? evt : window.event;
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            if ((charCode > 31 && (charCode < 48 || charCode > 57)) && charCode !== 46) {
              evt.preventDefault();;
            } else {
              return true;
            }
          },

          handlePrint: function() {
            if(this.isResponse) {
              window.print();
            }
            else {
              alert('검색 후 결과 출력을 진행 해주시기 바랍니다.');
            }
          },
          
          handleExport: function() {
              if(this.isResponse) {
                this.excelExport();
              }
              else {
                alert('검색 후 결과 저장을 진행 해주시기 바랍니다.');
              }
            },

          handleSearchSubmit: function() {
            var validation = true;
            var message = '';
            
            if(!this.selectedCompany && this.companySearch != '') {
                validation = false;
                message = '회사명 입력 후 돋보기 버튼을 눌러 회사명을 선택해주세요.';
            }else if(!this.selectedCompanyType && !this.selectedCompany) {
              validation = false;
              message = '기업 유형은 필수 선택 입니다.';
            }

            if(!this.selectedYear) {
              validation = false;
              message = '대상 년도는 필수 선택 입니다.';
            }

            if(validation) {
              //this.isResponse = false;
              this.isFetching = true;
              this.requestData();
            }
            else {
              alert(message);
            }
            
          },
          
          renderGridAndChart: function (val, id) {
              if(id == 'origin') {
                if(val) {
                  this.university_origin_tab_list = this.university_origin[val];
                  var top3Data = this.university_origin[val];
                  if(top3Data.length > 3) {
                    top3Data = this.university_origin[val].slice(0,3);  
                  }
                  setRenderPieChart('origin', _.map(top3Data, function(item) {
                    return [item.text, item.point];
                  }), Highcharts);
                }
              }
              else if (id == 'dept') {
                if(val) {
                  this.university_dept_tab_list = this.university_dept[val];
                  var top3Data = this.university_dept[val];
                  if(top3Data.length > 3) {
                    top3Data = this.university_dept[val].slice(0,3);  
                  }
                  //학력 pie chart render
                  setRenderPieChart('dept', _.map(top3Data, function(item) {
                	var idx = item.text.lastIndexOf('/') == -1 ? 0 : item.text.lastIndexOf('/') + 2;  	
	                var itemtext = item.text.substr(idx);
                    return [itemtext, item.point];
                  }), Highcharts);
                }
              }
              else if(id == 'deptcol') {
                if(val) {
                  this.university_deptcol_tab_list = this.university_deptcol[val];
                  var top3Data = this.university_deptcol[val];
                  if(top3Data.length > 3) {
                    top3Data = this.university_deptcol[val].slice(0,3);  
                  }
                  //학력 pie chart render
                  setRenderPieChart('deptcol', _.map(top3Data, function(item) {
                	var idx = item.text.lastIndexOf('/') == -1 ? 0 : item.text.lastIndexOf('/') + 2;  	
	                var itemtext = item.text.substr(idx);
                    return [itemtext, item.point];
                  }), Highcharts);
                }
              }
              else if(id == 'uniarea') {
                  if(val) {
                    this.university_area_tab_list = this.university_area[val];
                    var top3Data = this.university_area[val];
                    if(top3Data.length > 3) {
                      top3Data = this.university_area[val].slice(0,3);  
                    }
                    //학력 pie chart render
                    setRenderPieChart('uniarea', _.map(top3Data, function(item) {
                  	var idx = item.text.lastIndexOf('/') == -1 ? 0 : item.text.lastIndexOf('/') + 2;  	
  	                var itemtext = item.text.substr(idx);
                      return [itemtext, item.point];
                    }), Highcharts);
                  }
                }

            },

          //REST API Request
          requestData: function () {
            

            var _this = this;
            var _data = {};
            if(this.selectedYear) {
              _data['year'] = this.selectedYear;
            }
            if(this.selectedCompany) {
              _data['comnm'] = this.selectedCompany.value;
            }
            if(this.selectedCompanySize) {
              _data['comind'] = this.selectedCompanySize;
            }
            if(this.selectedCompanyType) {
              _data['comtype'] = this.selectedCompanyType;
            }
            if(this.hopeSalary.start > 0) {
              _data['ssal'] = this.hopeSalary.start;
            }
            if(this.hopeSalary.end > 0) {
              _data['esal'] = this.hopeSalary.end;
            }
            if(this.hopeSalary_comp.start > 0) {
                _data['ssal'] = this.hopeSalary_comp.start;
            }
            if(this.hopeSalary_comp.end > 0) {
                _data['esal'] = this.hopeSalary_comp.end;
            }
            
            $.ajax({
              type: "GET",
              url: _this.selectedCompany != null ? "/swiss/cm/getStatByComp.do" : "/swiss/cm/getStatByCond.do",
              dataType: "text",
              data: _data,
              beforeSend : function(xhr){
                  xhr.setRequestHeader("username", userid);
              },
              success: function(response) {
                var res = JSON.parse(response);
                if(res.count == 0){
                	alert('검색 결과가 존재하지 않습니다.');
                	_this.isResponse = false;
                	_this.isFetching = false;
                }else{
                	_this.resultCount = res.count;
	                _this.isResponse = true;
	                _this.isFetching = false;  
	                // _this.selectedOriginTabValue = null;
	                // _this.selectedDeptTabValue = null;
	                // _this.selectedDeptcolTabValue = null;
	                
	                _this.isCompany_list =  _this.selectedCompany != null ? false : true;
	                
	                _this.company_list = _.map(res.company_list, function (item, index) {
	                	var infos = index.split('_');
	                    return {
	                      name: infos[1],
	                      count: round(item/res.count * 100, 2)+'%('+item+'명)',
	                    };
	                  });
	                
	                
	                var companyTop5 =  _.map(res.company_list, function (item, index) {
	                	var infos = index.split('_');
	                    return [infos[1], item];
	                  });
	                	
	                if(companyTop5.length > 5) {
	                	companyTop5 = companyTop5.slice(0,5);  
	                }
	                

	                
	                setRenderPieChart('company', companyTop5, Highcharts);
	                
	                
	                
	                if(_this.selectedYear == '2018')
	                	_this.isLicense = false;
	                else
	                	_this.isLicense = true;	
	                
	                if($.isEmptyObject(res.license_nm))
	                	_this.isPublicLicense = false;
	                else
	                	_this.isPublicLicense = true;
	                
	                if($.isEmptyObject(res.private_license_nm))
	                	_this.isPrivateLicense = false;
	                else
	                	_this.isPrivateLicense = true;
                           
	                _this.searchResult = res;
	                if(_this.selectedCompany) {
	                  if(_.has(res,'COMPANYINFO')) {
	                    _this.company_info = res.COMPANYINFO;
	                    _this.isCompany_info = true;
	                    var empData = _this.company_info;
	                    var employeeModel = empData.YEAR;
	                    setRenderLineSimpleChart('employee_chart', employeeModel, empData.EMPLOYEECNT, Highcharts);
	                    setRenderColumnSimpleChart('employee_multi_chart', 
	                      _.map(employeeModel, function(item, index){ return {name: item, y: empData.ENTRANTCNT[index]}; }),
	                      _.map(employeeModel, function(item, index){ return {name: item, y: empData.RETIREECNT[index]}; }),
	                      _.map(employeeModel, function(item, index){ return {name: item, y: empData.EMPLOYEERATIO[index]}; }),
	                    Highcharts);
            			var _salcomp = getColumnChartSeries(getSeriesDataAndSort(empData.SALARYCOMPARE, isSimple=true, sort=false));
            			setSalaryColumnChart('salary_compare_chart', _salcomp, Highcharts, 260);
	                  }
	                  else {
	                    _this.isCompany_info = false;
	                  }
	                }
	                else {
	                  _this.isCompany_info = false;
	                }
	
	                
	                
	                var getOverSeaPercent = function(total, data) {
	                  if(_.keys(data).length > 0 ){
	                	  var empty = 0;
	                	  if('해당없음' in data)
	                		  empty = data['해당없음'];
	                    var value = total - empty;
	                    var avg = round(value / total);
	                    var percentage = round((value / total) * 100);
	                    return {avg: avg, percentage: percentage};
	                  }
	                  else {
	                    return {avg: 0.00, percentage: 0.00};
	                  }
	                  
	                }
	                _this.toeic_rate = round(res.toeic_percent);
	                _this.avarageAnalysis = {
	                  gradescore_avg: res.gradescore.length > 0 ? round(_.sum(res.gradescore) / res.gradescore.length) : 0,
	                  gradescore_percent: round(res.gradescore_percent),
	                  toeic_avg: res.toeic.length > 0 ? round(_.sum(res.toeic) / res.toeic.length) : 0,
	                  toeic_percent: round(res.toeic_percent),
	                  license_avg: round((_.sum(getObjectConvertArray(res.license_nm)) / res.count)),
	                  license_percent: round(res.license_percent),
	                  oversea_avg: getOverSeaPercent(res.count, res.oversea).avg,
	                  oversea_percent: getOverSeaPercent(res.count, res.oversea).percentage,
	                  internship_avg: getOverSeaPercent(res.count, res.internship).avg,
	                  internship_percent: getOverSeaPercent(res.count, res.internship).percentage,
	                  transfer_avg: getOverSeaPercent(res.count, res.transfer).avg,
	                  transfer_percent: getOverSeaPercent(res.count, res.transfer).percentage,
	                  teach_avg: getOverSeaPercent(res.count, res.teach).avg,
	                  teach_percent: getOverSeaPercent(res.count, res.teach).percentage,
	                }
	
	
	               
	                //설립구분 
	                setRenderPieChart('fund', _.map(_.keys(res.university_fund), function(key) {
	                  return [key, res.university_fund[key]];
	                }), Highcharts);
	                
	                //학제
	                setRenderPieChart('kind', _.map(_.keys(res.university_kind), function(key) {
	                  return [key, res.university_kind[key]];
	                }), Highcharts);
	
	
	                //출신학교 list
	                _this.university_origin = getOriginUniversityRemapping(res.university, res.university_degree);
	                _this.selectedOriginTabValue = 'all';
	                _this.renderGridAndChart('all', 'origin');
	                
	                //출신학교 소재지 list
	                _this.university_area = getOriginUniversityRemapping(res.university_area, res.university_area_degree);
	                _this.selectedAreaTabValue = 'all';
	                _this.renderGridAndChart('all', 'uniarea');
	                
	                //전공 list
	                _this.university_dept = getOriginUniversityRemapping(res.dept, res.dept_degree);
	                _this.selectedDeptTabValue = 'all';
	                _this.renderGridAndChart('all', 'dept');
	
	
	                //전공계열 list
	                _this.university_deptcol = getOriginUniversityRemapping(res.deptcol, res.deptcol_degree);
	                _this.selectedDeptcolTabValue = 'all';
	                _this.renderGridAndChart('all', 'deptcol');
	
	
	                //토익 line chart
	                var toeicmin = res.toeic ? Math.min.apply(null, res.toeic) : 0;
	                toeicmain = toeicmin <= 0 ? 0 : toeicmin;
	                setRenderMultipleAxisChart('toeic_chart',res.toeic, Highcharts, 100, toeicmin, 990);
	                _this.toeic_avarage = res.toeic.length > 0 ? round(_.meanBy(res.toeic)) : 0;

	
	                //학점 line chart
	                var scoremin = res.gradescore ? Math.min.apply(null, res.gradescore) - 10 : 0;
	                scoremin = scoremin <= 0 ? 0 : scoremin;
	                setRenderMultipleAxisChart('grade_chart',res.gradescore, Highcharts, 10, scoremin, 100);
	                
	                //해외경험.
	                var _oversea = getColumnChartSeries(getSeriesDataAndSort(res.oversea));
	                setRenderColumnChart('overseaChart', _oversea, Highcharts, 260);
	                
	                //인턴
	                setRenderHalfDounutChart('internChart', _.map(_.keys(res.internship), function(key) {
	                  return [key, res.internship[key]];
	                }), Highcharts, 260);
	                //편입
	                setRenderHalfDounutChart('transferChart', _.map(_.keys(res.transfer), function(key) {
	                  return [key, res.transfer[key]];
	                }), Highcharts, 260);
	                //교직여부
	                setRenderHalfDounutChart('teachChart', _.map(_.keys(res.teach), function(key) {
	                  return [key, res.teach[key]];
	                }), Highcharts, 260);

	                //자격증 종류 column chart
	                var licenseArray = getLicenseDataAndSort(res.license_nm);
	                _this.license_list = licenseArray;
	                var top3Data = licenseArray;
	                if(top3Data.length > 3) {
	                  top3Data = licenseArray.slice(0,3);
	                }

	                var privatelicenseArray = getLicenseDataAndSort(res.private_license_nm);
                    _this.privatelicense_list = privatelicenseArray;

	                setRenderPieChart('licenseChart', _.map(top3Data, function(item) {
                                      var idx = item.text.lastIndexOf('/') == -1 ? 0 : item.text.lastIndexOf('/') + 2;
                                      var itemtext = item.text.substr(idx);
                                      return [itemtext, item.point];}), Highcharts);

	                var top3Data = privatelicenseArray;
	                if(top3Data.length > 3) {
	                  top3Data = privatelicenseArray.slice(0,3);
	                }

                    setRenderPieChart('privatelicenseChart', _.map(top3Data, function(item) {
                                      return [item.text, item.point];}), Highcharts);

              	}
              },
              error: function(xhr) {
              }
            });
          },
        },
        created(){
          this.isUIResponse = true;
        },
        watch: {
          isUIResponse: function(val) {
            if(val) {
              $('#module0').waitMe('hide');
            }
            else {
              run_waitMe($('#module0'), 1, 'bounce');
            }
          },
          isFetching: function(val) {
            var loading = 'bounce';
            if(val) {
              run_waitMe($('#wrap_container'), 1, loading, "1");
            }
            else {
              $('#wrap_container').waitMe('hide');
            }
          },
          selectedOriginTabValue: function(val) {
        	  this.renderGridAndChart(val, 'origin');
          },
          selectedAreaTabValue: function(val) {
              this.university_area_tab_list = this.university_area[val];
              var top3Data = this.university_area[val];
              if(top3Data.length > 3) {
                top3Data = this.university_area[val].slice(0,3);  
              }
              setRenderPieChart('uniarea', _.map(top3Data, function(item) {
                return [item.text, item.point];
              }), Highcharts);
            },
          selectedDeptTabValue: function(val) {
        	  this.renderGridAndChart(val, 'dept');
          },
          selectedDeptcolTabValue: function(val) {
        	  this.renderGridAndChart(val, 'deptcol');
          },
          slider_value: function(val) {
            var res = this.searchResult;
            if(val > 0) {
                
                var _grade = getRateArray(res.count, res.gradescore, val);
                var _toeic = getRateArray(res.count, res.toeic, val);
                var _license = getRateArray(res.count, res.license_cnt, val);
                
                this.avarageAnalysis.gradescore_avg = _grade.avg;
                this.avarageAnalysis.toeic_avg = _toeic.avg;
                this.avarageAnalysis.license_avg = _license.avg;
                if(val > 50) {
                  this.slider_text = "하위 " + (100 - val) + " %";
                }
                else {
                  this.slider_text = "상위 " + (val) + " %";
                }
              }
              else {
                this.slider_text = "전체";
                this.avarageAnalysis.gradescore_avg = res.gradescore.length > 0 ? round(_.sum(res.gradescore) / res.gradescore.length) : 0,      		
                this.avarageAnalysis.toeic_avg = res.toeic.length > 0 ? round(_.sum(res.toeic) / res.toeic.length) : 0,
                this.avarageAnalysis.license_avg = round((_.sum(getObjectConvertArray(res.license_nm)) / res.count));
              }
            
          },
          selectedCompanyType: function(val) {
            this.selectedCompanyTypeText = null;
            if(val) {
              var _find = _.find(this.companyTypes, {value: val});
              if(_find) {
                setTimeout(() => {
                  this.selectedCompanyTypeText = _find.text;
                }, 100);
              }
            }
          },
          selectedCompanySize: function(val) {
            this.selectedCompanySizeText = null;
            if(val) {
              var _find = _.find(this.companySizes, {value: val});
              if(_find) {
                setTimeout(() => {
                  this.selectedCompanySizeText = _find.text;
                }, 100);
              }
            }
          },

        }
      });
    },
  });

});
