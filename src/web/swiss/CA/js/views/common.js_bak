Highcharts.setOptions({
    lang: {
        thousandsSep: ','
    }
});

function noData(id, height) {
  $("#" + id).html('<div style="height: '+height+'px;vertical-align: baseline;line-height: '+height+'px;">데이터가 존재하지 않습니다.</div>');
}

/**
 * @description UI 코드가 object로 되어 있어서 이를 JSON Array로 변환하는 작업.
 * @param {*} _responseData data
 * @param {*} _type Object 의 key
 * @returns 
 */
 function arrayToObject(_responseData, _type) {
  var result2 = [];
  var nowObject = _responseData[_type];
  if(_type == 'DEPARTMENT_L') {
	    _.map(_.keys(nowObject), function (item, index) {
	      var splitKey = item.split('_');
	      var value = item;
	      var text = nowObject[item];

	      if(splitKey[0].substring(0, 2) == 'C0') {
	        result2.push({value, text});
	      }
	    });

	    return result2;
	  }
  else {
	  var result = [];
	  var _arrayData = _.map(_.keys(nowObject), function (item, index) {
	    return {
	      value: item,
	      text: nowObject[item],
	    };
	  });
	
	  return _.concat(result, _arrayData);

  }
 }

/**
 * @description Raw Object 를 Series data로 형식 변환.
 * @param {*} data 
 */
 function getSeriesDataAndSort(data, isSimple = false, sort=true) {
  var _keys = _.keys(data);
  var _all = []
  

  if(isSimple) {
    _all = _.map(_keys, function (item, index) {
      return {
        text: item,
        value: data[item],
      };
    });
  }
  else {
    var allPoint = _.sum(_.map(_keys, function (item, index) {
      return  data[item];
    }));
    _all = _.map(_keys, function (item, index) {
      return {
        text: item,
        value: round((data[item] / allPoint) * 100),
        point: data[item],
      };
    });
  }
  if(sort)
	  return _.sortBy(_all, 'value').reverse();
  else
	  return _all;
}
 
 /**
  * @description Raw Object 를 Series data로 형식 변환.
  * @param {*} data 
  */
  function getLicenseDataAndSort(data) {
   var _keys = _.keys(data);
   var _all = []
   
   var allPoint = _.sum(_.map(_keys, function (item, index) {
       return  data[item];
     }));
     _all = _.map(_keys, function (item, index) {
       return {
         text: item,
         value: round((data[item] / allPoint) * 100)+'%('+data[item]+'명)',
         point: data[item],
       };
     });
     return _.sortBy(_all, 'point').reverse();
 }


/**
 * @description Object 를 JSON Array 로 형식 변환.
 * @param {*} data 
 */
 function getJSONArray(data) {
  var _keys = _.keys(data);
  return _.map(_keys, function (item, index) {
    return {
      text: item,
      value: data[item],
    };
  });
}


  /**
   * @description 라인 컬럼 혼합 차트 Render
   * @param {*} id 
   * @param {*} seriesData 
   */
 function setRenderMultipleAxisChart(id, seriesData, Highcharts, tickInterval = 10, xmin, xmax) {
    if(seriesData.length == 0) {
      noData(id, 260);
    }
    else {
      Highcharts.chart(id, {
        title: { text: '' },
        xAxis: [{
          title: { text: '' },
          alignTicks: false,
          tickInterval,
          min: xmin,
          max: xmax,
        }, {
          title: { text: '' },
          alignTicks: false,
          opposite: true
        }],
        yAxis: [{title: { text: '' }}, {title: { text: '' }, opposite: true}],
        tooltip: {
          headerFormat: '',
          pointFormat: '<span style="color:{point.color}"> \u25CF </span>' + '<b>{point.x:.0f} ~ {point.x2:.0f}</b><br />{point.y} 건',
        },
        plotOptions: {
          histogram: {
            accessibility: {
              point: {
                valueDescriptionFormat: '{index}. {point.x:.0f} to {point.x2:.0f}, {point.y}.'
              }
            }
          }
        },

        series: [{
          name: 'Histogram',
          type: 'histogram',
          showInLegend: false,
          baseSeries: 's1',

        }, {
          name: 'Data',
          type: 'scatter',
          data: seriesData,
          id: 's1',
          marker: {
            radius: 1.5
          },
          showInLegend: false,
          visible: false
        }],
          exporting: { enabled: false },
        credits: { enabled: false }
      });
    }
  }

  /**
 * @description 라인 차트 심플버전 Render
 * @param {*} id 
 * @param {*} seriesData 
 */
function setRenderLineSimpleChart(id, categories, data, Highcharts) {
  if(data.length == 0) {
    noData(id, 400);
  }
  else {
    Highcharts.chart(id, {
      title: {text: ''},
      yAxis: { title: { text: '' } },
      xAxis: { categories: categories},
      series: [{
        name: '종업원 수',
        showInLegend: false,
        data: data,
      }],
      exporting: { enabled: false },
      credits: { enabled: false }
    });
  }
}

 /**
 * @description 라인 차트 심플버전 Render
 * @param {*} id
 * @param {*} seriesData
 */
function setRenderLineSimpleChart2(id, categories, data1, data2, data3, seriesNames, Highcharts) {
  if(data1.length == 0) {
    noData(id, 400);
  }
  else {
    Highcharts.chart(id, {
      title: {text: ''},
      yAxis: { title: { text: '' } },
      xAxis: { categories: categories},
      series: [
        {name: seriesNames[0], data: data1 },
        {name: seriesNames[1], data: data2 },
        {name: seriesNames[2], data: data3 },
      ],
      exporting: { enabled: false },
      credits: { enabled: false }
    });
  }
}

 /**
 * @description 컬럼 차트 심플버전 Render
 * @param {*} id 
 * @param {*} seriesData 
 */
  function setRenderColumnSimpleChart(id, data1, data2, data3, Highcharts, type) {
    if(data1.length == 0) {
      noData(id, 400);
    }
    else {
      var seriesNames = ['입사자수', '퇴사자수', '순입사율'];
      Highcharts.chart(id, {
        title: {text: ''},
        tooltip: {
          headerFormat: '',
          pointFormatter: function() {
            var unit = '명';
            return '<span style="color:'+this.color+'"> \u25CF </span><b><span style="color:'+this.color+'">'+  this.series.name + '</span></b><br /><b>'+this.name+'</b>  ' + ' <b>'+this.y+'</b>' + unit;
          },
        },
        xAxis:
        [{
          type: 'category',
          title: {
            text: '',
        },
        }],
        series: [
          {name: seriesNames[0], type: 'column',  data: data1 },
          {name: seriesNames[1], type: 'column', data: data2 },
          {name: seriesNames[2], type: 'spline', data: data3, yAxis: 1},
        ],
        yAxis: [{ // Primary yAxis
          labels: {
        	format: '{value}명',  
          },
          title: {
              text: '입사자/퇴사자',
          },
        }, { // Second yAxis
            labels: {
          	format: '{value}%',  
            },
            title: {
                text: '순입사율',
            },
            opposite: true
          }],
                
        plotOptions: {
        	spline: {
                color: '#E74D74'
            }
        },
        
        exporting: { enabled: false },
        credits: { enabled: false }
      });
    }
    
  }

 /**
   * @description 컬럼 차트 심플버전 Render
   * @param {*} id
   * @param {*} seriesData
   */
    function setRenderColumnSimpleChartByDept(id, data, Highcharts, type) {
      if(data.length == 0) {
        noData(id, 400);
      } else if (data.length == 3) {
        Highcharts.chart(id, {
          title: {text: ''},
          tooltip: {
            headerFormat: '',
            pointFormatter: function() {
              var unit = '명';
              return '<span style="color:'+this.color+'"> \u25CF </span><b><span style="color:'+this.color+'">'+  this.series.name + '</span></b><br /><b>'+this.category+'</b>  ' + ' <b>'+this.y+'</b>' + unit;
            },
          },
          xAxis: [{
            type: 'category',
            categories: data[0].name,
            width: '30%',
            title: {
              text: '',
            },
          },
          {
            type: 'category',
            categories: data[1].name,
            offset: 0,
            left: '33%',
            width: '30%',
            title: {
              text: '',
            },
          },
          {
            type: 'category',
            categories: data[2].name,
            offset: 0,
            left: '66%',
            width: '30%',
            title: {
              text: '',
            },
            }
          ],
          series: [
            {name: data[0].year, xAxis: 0, type: 'column',  data: data[0].data },
            {name: data[1].year, xAxis: 1, type: 'column', data: data[1].data },
            {name: data[2].year, xAxis: 2, type: 'column', data: data[2].data },
          ],
          plotOptions: {
              series: {
                  pointWidth: 25
              }
          },
          yAxis: [{ // Primary yAxis
            labels: {
            format: '{value}명',
            },
            title: {
                text: '인원수',
            },
          }],

          exporting: { enabled: false },
          credits: { enabled: false }
        });
      } else if (data.length == 2) {
        Highcharts.chart(id, {
          title: {text: ''},
          tooltip: {
            headerFormat: '',
            pointFormatter: function() {
              var unit = '명';
              return '<span style="color:'+this.color+'"> \u25CF </span><b><span style="color:'+this.color+'">'+  this.series.name + '</span></b><br /><b>'+this.category+'</b>  ' + ' <b>'+this.y+'</b>' + unit;
            },
          },
          xAxis: [{
            type: 'category',
            categories: data[0].name,
            width: '49%',
            title: {
              text: '',
            },
          },
          {
            type: 'category',
            categories: data[1].name,
            offset: 0,
            left: '50%',
            width: '49%',
            title: {
              text: '',
            },
          },
          ],
          series: [
            {name: data[0].year, xAxis: 0, type: 'column',  data: data[0].data },
            {name: data[1].year, xAxis: 1, type: 'column', data: data[1].data },
          ],
          plotOptions: {
              series: {
                  pointWidth: 25
              }
          },
          yAxis: [{ // Primary yAxis
            labels: {
            format: '{value}명',
            },
            title: {
                text: '인원수',
            },
          }],

          exporting: { enabled: false },
          credits: { enabled: false }
        });
      } else if (data.length == 1) {
       Highcharts.chart(id, {
          title: {text: ''},
          tooltip: {
            headerFormat: '',
            pointFormatter: function() {
              var unit = '명';
              return '<span style="color:'+this.color+'"> \u25CF </span><b><span style="color:'+this.color+'">'+  this.series.name + '</span></b><br /><b>'+this.category+'</b>  ' + ' <b>'+this.y+'</b>' + unit;
            },
          },
          xAxis: [{
            type: 'category',
            categories: data[0].name,
            title: {
              text: '',
            },
          },
          ],
          series: [
            {name: data[0].year, xAxis: 0, type: 'column',  data: data[0].data },
          ],
          plotOptions: {
              series: {
                  pointWidth: 25
              }
          },
          yAxis: [{ // Primary yAxis
            labels: {
            format: '{value}명',
            },
            title: {
                text: '인원수',
            },
          }],

          exporting: { enabled: false },
          credits: { enabled: false }
        });
      }
    }

   /**
   * @description Stacked bar Render
   * @param {*} id
   * @param {*} seriesData
   */
    function setRenderColumnSimpleChartByArea(id, data1, data2, Highcharts) {
      if(data1.length == 0 && data2.length == 0) {
        noData(id, 400);
      }
      else {
        Highcharts.chart(id, {
          chart: {type: 'bar'},
          title: {text: ''},
          tooltip: {
            headerFormat: '',
            pointFormatter: function() {
              var unit = '%';
              return '<span style="color:'+this.color+'"> \u25CF </span><b><span style="color:'+this.color+'">'+  this.series.name + '</span></b><br /><b>'+this.name+'</b>  ' + ' <b>'+this.y+'</b>' + unit;
            },
          },
          xAxis:
          [{
            type: 'category',
            title: {
              text: '',
          },
          }],
          series: [
            {name: data2[0].category, type: 'column', data: data2 },
            {name: data1[0].category, type: 'column',  data: data1 },
          ],
          yAxis: [{ // Primary yAxis
            min: 0,
            max: 100,
            tickInterval: 10,
            labels: {
          	format: '{value}',
            },
            title: {
                text: '출신비율(%)',
            },
          }],
          plotOptions: {
            series: {
              stacking: 'normal'
            }
          },

          exporting: { enabled: false },
          credits: { enabled: false }
        });
      }
   }


/**
 * @description 컬럼 차트 심플버전 Render
 * @param {*} id
 * @param {*} seriesData
 */
  function setRenderColumnSimpleChartBySalary(id, seriesData, dept, Highcharts, flag) {
    if(seriesData.length == 0) {
      noData(id, 400);
    }
    else {
      Highcharts.chart(id, {
        chart: {type: 'column'},
        title: {text: ''},
        tooltip: {
          headerFormat: '',
          pointFormatter: function() {
            var unit = '명';
            return '<span style="color:'+this.color+'"> \u25CF </span><b>'+  this.name + '</b><b> '+this.y+'</b>' + unit;
          },
        },
        xAxis: [{
            tickPositioner: function() {
              var positions = [];
              for (var i = 0; i < seriesData.length; i++) {
                if (flag) {
                    if(i%2 == 0){
                      positions.push(i);
                    }
                } else {
                    positions.push(i);
                }
              }

              return positions
            },
            min: 0,
            labels: {
                formatter: function() {
                    return Highcharts.numberFormat(this.value*dept, 0);
                },
            },
        }],
        yAxis: [{
          min: 0,
          labels: {
            format: '{value}명',
          },
          title: {
              text: '인원수',
          },
        }],
        title: {
              text: '(단위: 만원)',
              x: 0,
              y: 248,
              align: 'right',
              style: {
                  color: '#FF0000',
                  fontSize: 12
              }
        },
        series: [{
          showInLegend: false,
          name: '급여분포',
          data: seriesData,
        }],
        plotOptions: {
        	spline: {
                color: '#E74D74'
            },
            series: {
                pointPadding: 0,
                groupPadding: 0.02,
                borderWidth: 0,
                shadow: false,
                 dataLabels: {
                    borderRadius: 0,
                    borderWidth: 1
                }
            },
            column: {
                pointPlacement: 'between'
            }
        },
        exporting: { enabled: false },
        credits: { enabled: false }
      });
    }
  }


  function setRenderForceChart(id, data, Highcharts) {
	    var test = [];
	    if(data.length == 0) {
	      noData(id, 200);
	    }
	    else {
	      var seriesNames = ['학점'];
	      var height = Object.keys(data).length == 4 ? 250 : Object.keys(data).length == 3 ? 200 : 150;
	      var score = (data.expected + data.shap_gradescore) > 100 ? 100 : (data.expected + data.shap_gradescore);
	      score = score < 0 ? 0 : score;
	      var scorecolor = data.shap_gradescore > 0 ? '#E62E4D' : '#498CFB';
	      var scoredata = [data.expected, score];
	      var scoremin = Math.min(...scoredata);
	      var scoremax = Math.max(...scoredata);
	      var annoX = Math.abs((0-scoremin)) > Math.abs((100-scoremax)) ? 0 : 600;
	      var serisedata = [{
	    	  low: scoremin,
	    	  high: scoremax,
	    	  color: scorecolor
	      }]
	      if('shap_toeic' in data){
	    	  var toeiccolor = data.shap_toeic > 0 ? '#E62E4D' : '#498CFB';
	    	  var toeic = (data.expected + data.shap_toeic) > 100 ? 100 : (data.expected + data.shap_toeic);
		      toeic = toeic < 0 ? 0 : toeic;
		      var toeicdata = [data.expected, toeic];
		      
		      serisedata.push({
		    	  low: Math.min(...toeicdata),
		    	  high: Math.max(...toeicdata),
		    	  color: toeiccolor
		      });
		      seriesNames.push('TOEIC');
	      }
	      
	      if('shap_license' in data){
	    	  var licensecolor = data.shap_license > 0 ? '#E62E4D' : '#498CFB';
	    	  var license = (data.expected + data.shap_license) > 100 ? 100 : (data.expected + data.shap_license);
		      license = license < 0 ? 0 : license;
		      var licensedata = [data.expected, license];
		      serisedata.push({
		    	  low: Math.min(...licensedata),
		    	  high: Math.max(...licensedata),
		    	  color: licensecolor
		      });
		      seriesNames.push('자격증 점수');
	      }
	      	      
	      
	      Highcharts.chart(id, {
	        title: {text: ''},
	        chart: {
	            type: 'columnrange',
	            inverted: true,
	            height: height
	        },

	        xAxis: {
	            categories: seriesNames
	        },

	        yAxis: {
	            title: {
	                text: '취업 가능성 ( % )'
	            },
	            plotLines: [{
	                color: '#2CA02C', 
	                width: 2,
	                value: data.expected,
	                dashStyle: 'ShortDot'
	            }],
	            min: 0,
		        max: 100,
		        //gridLineColor: 'transparent'
	        },
	        plotOptions: {
	            columnrange: {
	                dataLabels: {
	                    enabled: true,
	                    //format: '{y}%'
	                    formatter:function(){
	    	        		var txt = null;
	    	        		if(test.indexOf(this.point.index) == -1) {
	    	        			test.push(this.point.index);
		    	        		if(this.point.low == this.point.high)
		    	        			txt = '변화 없음';
		    	        		else if(data.expected > this.point.low)
		    	        			txt = (data.expected - this.point.low).toFixed(2) + '% 감소';
		    	        		else
		    	        			txt = (this.point.high - data.expected).toFixed(2) + '% 증가';
	    	        		}
	    	                return txt;
	    	            }
	                },
	                borderRadius: 5
	            }
	        },
	        tooltip: {
	        	enabled: false
	        },
	        annotations: [{
		    	  draggable: '',
		          labelOptions: {
		              backgroundColor: 'transparent',
		              borderWidth: 0,
		              verticalAlign: 'top',
		              x: annoX,
		              y: 0,
		          },
		          labels: [{
		        	  point: {
		                  xAxis: '학점',
		                  yAxis: data.expected,
		                  x: '학점',
		                  y: data.expected
		              },
		              style: {
		                  fontSize: '12px',
		                  color: '#2CA02C',
		                  fontWeight: 'bold',
		                  fontFamily: 'Segoe UI'
		              },
		              text: '출신 학과 평균(' + data.expected + '%)'
		          }]
		      }],

	        legend: {
	            enabled: false
	        },

	        series: [{
	            name: seriesNames,
	            data: serisedata
	        }],
	        exporting: { enabled: false },
	        credits: { enabled: false }
	      });
	    }    
	  }


function getColumnChartSeries(data, selectName = '') {
  var result= _.map(data, function(x, i) { 
    if(!x.point) {
      if(x.text === selectName) {
        return {name: x.text, y:x.value, color: '#FF4500',};
      }
      else {
        return {name: x.text, y:x.value, };
      }
    }
    else {
      if(i === 0) {
        return {name: x.text, y:x.value, value: x.point, color: '#FF4500',};
      }
      else {
        return {name: x.text, y:x.value, value: x.point};
      }
    }
    
  })
  return result;
}


/**
 * @description 컬럼 차트 Render
 * @param {*} id 
 * @param {*} seriesData 
 */
 function setRenderColumnChart(id, seriesData, Highcharts, height=400) {
   if(seriesData.length == 0) {
    noData(id, height);
   }
   else {
    Highcharts.chart(id, {
      chart: {type: 'column'},
      title: {text: ''},
      tooltip: {
        headerFormat: '',
        pointFormatter: function() {
          var ext = this.value ? '('+this.value+'개)' : '' ;
          return '<span style="color:'+this.color+'"> \u25CF </span><b>'+this.name+'</b>  ' + ' <b>'+this.y+'</b>% ' + ext;
        },
      },
      yAxis: { title: { text: ''}, min:0, max: 100 },
      xAxis: { type: 'category' },
      series: [{
          showInLegend: false,
          name: '',
          data: seriesData,
      }],
      plotOptions: {
        series: {
          dataLabels: {
            enabled: true,
            y: -10,
            style: {
              fontFamily: 'Segoe UI',
              color: 'gray',
              fontSize: '16px',
              textOutline: false,
            },
            format: '{point.y:.1f}%',
          },
          color: 'gray',
          marker: {
            radius: 7
          }
        }
      },
      exporting: { enabled: false },
      credits: { enabled: false }
    });
   }
  
}
 
function setSalaryColumnChart(id, seriesData, Highcharts, height=400) {
   if(seriesData.length == 0) {
    noData(id, height);
   }
   else {
      var anotxt = (seriesData[0].y / seriesData[1].y).toFixed(2) + '배';

      var _seriesData = _.map(seriesData, function (item, index) {
         return {
                name: item.name,
                y: item.y,
                id: String(index)
              };
            });


    Highcharts.chart(id, {
      chart: {type: 'column'},
      title: {text: ''},
      tooltip: {
        headerFormat: '',
        pointFormatter: function() {
          return '<span style="color:'+this.color+'"> \u25CF </span><b>'+this.name+'</b>  ' + ' <b>'+this.y.toLocaleString()+'</b>만원';
        },
      },
      yAxis: { title: { text: ''}},
      xAxis: { type: 'category' },
      series: [{
          showInLegend: false,
          name: '',
          data: _seriesData,
      }],
      plotOptions: {
        series: {
          marker: {
            radius: 7
          }
        },
        column: {
            colorByPoint: true
        }
      },
      annotations: [{
          draggable: '',
          labelOptions: {
              backgroundColor: 'rgba(255,255,255,1)',
              borderWidth: 0,
              verticalAlign: 'middle',
          },
          labels: [{
              point: '0',
              style: {
                  fontSize: '12px',
                  color: '#E74D74',
                  fontWeight: 'bold',
                  fontFamily: 'Segoe UI'
              },
              text: anotxt
          }]
      }],
      colors: ['#6ECEDA', '#C6D2BE'],
      exporting: { enabled: false },
      credits: { enabled: false }
    });
   }

}

function setSalaryColumnChart2(id, seriesData, Highcharts, height=400) {
   if(seriesData.length == 0) {
       noData(id, height);
   }
   else {
      var _seriesData = _.map(seriesData, function (item, index) {
         return {
                name: item.name,
                y: item.y,
                id: String(index)
              };
            });


    Highcharts.chart(id, {
      chart: {type: 'column'},
      title: {text: ''},
      tooltip: {
        headerFormat: '',
        pointFormatter: function() {
          return '<span style="color:'+this.color+'"> \u25CF </span><b>'+this.name+'</b>  ' + ' <b>'+this.y.toLocaleString()+'</b>명';
        },
      },
      yAxis: { title: { text: ''}},
      xAxis: { type: 'category' },
      series: [{
          showInLegend: false,
          name: '',
          data: _seriesData,
      }],
      plotOptions: {
        series: {
          marker: {
            radius: 7
          }
        },
        column: {
            colorByPoint: true
        }
      },
      colors: ['#6ECEDA', '#C6D2BE'],
      exporting: { enabled: false },
      credits: { enabled: false }
    });
   }

}


function setRenderPieChart(id, seriesData, Highcharts, height=400) {
  if(seriesData.length == 0) {
    noData(id, height);
  }
  else {
    Highcharts.chart(id, {
      chart: { type: 'pie' },
        title: {text: '',},
        tooltip: {
          headerFormat: '',
          pointFormat: '<span style="color:{point.color}">\u25CF</span><b>{point.name}</b>  ' + '<b>{point.y} 건</b>  ({point.percentage:.1f}%)'
        },
        plotOptions: {
            pie: {
                size: '80%',
                cursor: 'pointer',
                data: seriesData
            }
        },
        series: [{
          innerSize: '30%',
                type: 'pie',
                dataLabels: {
                    verticalAlign: 'top',
                    enabled: true,
                    connectorWidth: 1,
                    distance: -30,
                    connectorColor: '#000000',
                    style: {
                      fontFamily: 'Segoe UI',
                      fontWeight: 'bold',
                      textOutline: false,
                    },
                    format: '{point.percentage:.1f}%',
                    filter: {
                      property: 'percentage',
                      operator: '>',
                      value: 4
                  }
                }
            }, {
                innerSize: '30%',
                type: 'pie',
                dataLabels: {
                    enabled: true,
                    connectorWidth: 1,
                    distance: 30,
                    format: '{point.name} ({point.percentage:.1f}%)',
                    style: {
                      fontFamily: 'Segoe UI',
                      fontWeight: 'bold',
                      textOutline: false,
                    },
                }
            }],
        exporting: {
            enabled: false
        },
        credits: {
            enabled: false
        }
    }); 
  }
}


function setRenderPieChart2(id, seriesData, Highcharts, height=400) {
  if(seriesData.length == 0) {
    noData(id, height);
  } else {
    Highcharts.chart(id, {
      chart: { type: 'pie' },
        title: {text: '',},
        tooltip: {
          headerFormat: '',
          pointFormat: '<span style="color:{point.color}">\u25CF</span><b>{point.name}</b>  ' +
              '<b>{point.percentage:.2f}%</b>'
        },
        plotOptions: {
            pie: {
                size: '80%',
                cursor: 'pointer',
                data: seriesData
            }
        },
        series: [{
          innerSize: '30%',
                type: 'pie',
                dataLabels: {
                    verticalAlign: 'top',
                    enabled: true,
                    connectorWidth: 1,
                    distance: -30,
                    connectorColor: '#000000',
                    style: {
                      fontFamily: 'Segoe UI',
                      fontWeight: 'bold',
                      textOutline: false,
                    },
                    format: '{point.percentage:.2f}%',
                    filter: {
                      property: 'percentage',
                      operator: '>',
                      value: 4
                  }
                }
            }, {
                innerSize: '30%',
                type: 'pie',
                dataLabels: {
                    enabled: true,
                    connectorWidth: 1,
                    distance: 30,
                    format: '{point.name} ({point.percentage:.1f}%)',
                    style: {
                      fontFamily: 'Segoe UI',
                      fontWeight: 'bold',
                      textOutline: false,
                    },
                }
            }],
        exporting: {
            enabled: false
        },
        credits: {
            enabled: false
        }
    });
  }
}

var clickChart = null;
function setRenderPieChartClick(id, seriesData, Highcharts, height=400) {
  if(seriesData.length == 0) {
    noData(id, height);
  }
  else {
    clickChart = new Highcharts.chart(id, {
      chart: { type: 'pie' },
        title: {text: '',},
        tooltip: {
          headerFormat: '',
          pointFormat: '<span style="color:{point.color}">\u25CF</span><b>{point.name}</b>  ' + '<b>{point.y} 건</b>  ({point.percentage:.1f}%)'
        },
        plotOptions: {
            pie: {
                size: '80%',
                cursor: 'pointer',
                events: {
                    click: function(event) {
                        var selectedPoint = this.chart.getSelectedPoints();
                        window.app.setSelectedCompany(event.point, selectedPoint);
                    }
                },
                data: seriesData,
            }
        },
        series: [
            {
                innerSize: '30%',
                type: 'pie',
                dataLabels: {
                    verticalAlign: 'top',
                    enabled: true,
                    connectorWidth: 1,
                    distance: -30,
                    connectorColor: '#000000',
                    style: {
                        fontFamily: 'Segoe UI',
                        fontWeight: 'bold',
                        textOutline: false,
                    },
                    format: '{point.percentage:.1f}%',
                    filter: {
                        property: 'percentage',
                        operator: '>',
                        value: 4
                    }
                }
            },
            {
                innerSize: '30%',
                type: 'pie',
                dataLabels: {
                    enabled: true,
                    connectorWidth: 1,
                    distance: 30,
                    format: '{point.name} ({point.percentage:.1f}%)',
                    style: {
                        fontFamily: 'Segoe UI',
                        fontWeight: 'bold',
                        textOutline: false,
                    },
                }
            }
        ],
        exporting: {
            enabled: false
        },
        credits: {
            enabled: false
        }
    });
  }
}

function setRenderPieChartMultiClick(id, seriesData, Highcharts, height=400) {
  if(seriesData.length == 0) {
    noData(id, height);
  } else {
    Highcharts.chart(id, {
      chart: { type: 'pie' },
        title: {text: '',},
        tooltip: {
          headerFormat: '',
          pointFormat: '<span style="color:{point.color}">\u25CF</span><b>{point.name}</b>  ' +
              '<b>{point.percentage:.2f}%</b>'
        },
        plotOptions: {
            pie: {
                size: '80%',
                cursor: 'pointer',
                events: {
                   click: function(event) {

                        if (this.chart.series[0].data[event.point.index].selected) {
                            if (id == "comtype_pie_chart") {
                                var arr = window.app.selectedComtype;
                                for(let i = 0; i < arr.length; i++) {
                                  if(arr[i].name === this.chart.series[0].data[event.point.index].name)  {
                                    arr.splice(i, 1);
                                    i--;
                                  }
                                }
                            } else if (id == "comind_pie_chart") {
                                var arr = window.app.selectedComind;
                                for(let i = 0; i < arr.length; i++) {
                                  if(arr[i].name === this.chart.series[0].data[event.point.index].name)  {
                                    arr.splice(i, 1);
                                    i--;
                                  }
                                }
                            }

                            this.chart.series[0].data[event.point.index].update({borderColor : '#FFFFFF', selected : false, sliced : false});
                            this.chart.series[1].data[event.point.index].update({borderColor : '#FFFFFF', selected : false, sliced : false});
                        } else {
                            if (id == "comtype_pie_chart") {
                                var arr = window.app.companyTypes;
                                for (let i = 0; i < arr.length; i++) {
                                    if (arr[i].text == this.chart.series[0].data[event.point.index].name) {
                                        window.app.selectedComtype.push({'name':arr[i].text, 'value':arr[i].value})
                                        break;
                                    }
                                }
                            } else if (id == "comind_pie_chart") {
                                var arr = window.app.companySizes;
                                for (let i = 0; i < arr.length; i++) {
                                    if (arr[i].text == this.chart.series[0].data[event.point.index].name) {
                                        window.app.selectedComind.push({'name':arr[i].text, 'value':arr[i].value})
                                        break;
                                    }
                                }
                            }

                            this.chart.series[0].data[event.point.index].update({borderColor : '#FF0000', selected : true, sliced : true});
                            this.chart.series[1].data[event.point.index].update({borderColor : '#FF0000', selected : true, sliced : true});
                        }
                    }
                },
                data: seriesData
            },
        },
        series: [{
          innerSize: '30%',
            type: 'pie',
            dataLabels: {
                verticalAlign: 'top',
                enabled: true,
                connectorWidth: 1,
                distance: -30,
                connectorColor: '#000000',
                style: {
                  fontFamily: 'Segoe UI',
                  fontWeight: 'bold',
                  textOutline: false,
                },
                format: '{point.percentage:.2f}%',
                filter: {
                  property: 'percentage',
                  operator: '>',
                  value: 4
              }
            }
            }, {
                innerSize: '30%',
                type: 'pie',
                dataLabels: {
                    enabled: true,
                    connectorWidth: 1,
                    distance: 30,
                    format: '{point.name} ({point.percentage:.1f}%)',
                    style: {
                      fontFamily: 'Segoe UI',
                      fontWeight: 'bold',
                      textOutline: false,
                    },
                }
            }],
        exporting: {
            enabled: false
        },
        credits: {
            enabled: false
        }
    });
  }
}


function setRenderHalfDounutChart(id, seriesData, Highcharts, height=400) {
	  if(seriesData.length == 0) {
	    noData(id, height);
	  }
	  else {
		  var majorPercent = "100";
		  dataz = [[seriesData[0][0], seriesData[0][1]]];
		  if(seriesData.length==2){
			  majorPercent = (seriesData[0][1] / (seriesData[0][1] + seriesData[1][1]) * 100).toFixed(2);
			  dataz = [
	               [seriesData[0][0], seriesData[0][1]],
	               {
	                   name: seriesData[1][0],
	                   y: seriesData[1][1],
	                   dataLabels: {
	                  	 enabled: false
	                   }
	                 }
	             ];
		  }
	    Highcharts.chart(id, {
	      chart: { renderTo: 'halfPie', type: 'pie', margin: [0, 0, 0, 0],},
	      title: {
	          text: majorPercent + '%',
	          align: 'center',
	          verticalAlign: 'middle',
	          y: 30,
	          style: {
	              color:'#A50000',
	              fontSize: '20px',
	              fontFamily: 'Segoe UI',
	              fontWeight: 'bold',
	              textOutline: false 
	            }
	      },
	        tooltip: {
	          headerFormat: '',
	          pointFormat: '<span style="color:{point.color}">\u25CF</span><b>{point.name}</b>  ' +
	              '<b>{point.y}건</b>  ({point.percentage:.1f}%)'
	        },
	        plotOptions: {
	        	pie: {
	                dataLabels: {
	                  enabled: true,
	                  distance: -20,
	                },
	                  startAngle: -90,
	                  endAngle: 90,
	                  center: ['50%', '75%'],
	                  size: '150%',
	                  showInLegend: false
	                 }
	        },
	        series: [{
	        	 type: 'pie',
	             innerSize: '50%',
	             data: dataz,
	             dataLabels: {
	               enabled: true,
	               //format: '{point.x}',
	               color: '#000000', 
	               align: 'center',
	               //세로 위치 지정
	               y: 20,
	               //x: 0,
	               style: {
	                      fontFamily: 'Segoe UI',
	                      fontWeight: 'bold',
	                      textOutline: false,
	                      size: '16px'
	                    }
	             }
	            }],
	        exporting: {
	            enabled: false
	        },
	        credits: {
	            enabled: false
	        }
	    }); 
	  }
	}

String.prototype.lpad = function(padLength, padString){
    var s = this;
    while(s.length < padLength)
        s = padString + s;
    return s;
}